#### Individual-Contributor-Specific Files BEGIN ####
.gitignore
#### Individual-Contributor-Specific Files BEGIN ####

#### Project-Specific Files BEGIN ####

# Ignore all files that may contain sensitive information or
# coded credentials, api tokens, etc.  Project Visindi follows
# a naming convention where such files begin with the string `secret`.
secret*

# Ignore all files created when the jupyter-book program builds a book.
_build/

# Ignore directories used for personal
# notes.
# e.g. 00--personal_notes/

# Ignore directories that serve as the dev, staging and build directories
# of the various DRSF Development Jupyter Notebook files.
# e.g. 04--app_source_code/drsf/tools/00--drsf_codebase_dev_notebooks/drsf_dev_notebook_1/DRSF_Source_Docs_DEV/
# e.g. 04--app_source_code/drsf/tools/00--drsf_codebase_dev_notebooks/drsf_dev_notebook_1/DRSF_Source_Docs_STAGING/
# e.g. 04--app_source_code/drsf/tools/00--drsf_codebase_dev_notebooks/drsf_dev_notebook_1/DRSF_Source_Docs_BUILD/

# Ignore directories that serve as the dev, staging and build directories
# of the DRSF Workbench Jupyter Notebook file.
# e.g. 04--app_source_code/drsf/tools/01--drsf_workbench_prod/DRSF_Source_Docs_DEV/
# e.g. 04--app_source_code/drsf/tools/01--drsf_workbench_prod/DRSF_Source_Docs_STAGING/
# e.g. 04--app_source_code/drsf/tools/01--drsf_workbench_prod/DRSF_Source_Docs_BUILD/

# Ignore directories that serve as the dev, staging and build directories
# of the DRSF Workbench Demo Jupyter Notebook file.
# e.g. 04--app_source_code/drsf/tools/02--drsf_workbench_prod_demo/DRSF_Source_Docs_DEV/
# e.g. 04--app_source_code/drsf/tools/02--drsf_workbench_prod_demo/DRSF_Source_Docs_STAGING/
# e.g. 04--app_source_code/drsf/tools/02--drsf_workbench_prod_demo/DRSF_Source_Docs_BUILD/

#### Project-Specific Files END ####


#### Python Development Files BEGIN####

# Ignore all the files created by the project directory's Python virtual
# environment.
venv*/

# Python Distribution Packaging Files
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg

# Byte-compiled / optimized / DLL files
**/__pycache__/
*.py[cod]
*$py.class

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

#### Python Development Files END####


#### Apple MacOS Files BEGIN ####

# General
.DS_Store
.AppleDouble
.LSOverride
# Icon must end with two \r
Icon
# Thumbnail Files
._*
# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
# Directories potentially created on remote AFP share.
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

#### Apple MacOS Files END####